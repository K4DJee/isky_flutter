import 'package:network_info_plus/network_info_plus.dart';
import 'package:isky_new/database/sqfliteDatabase.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';
import 'dart:convert';

class TcpReceiver {
  Future<void> startServer() async{
    if(await Permission.location.request().isGranted){
      final info = NetworkInfo();
    //–ù–∞–π—Ç–∏ ip
    String? localIp = await info.getWifiIP();
    print("–õ–æ–∫–∞–ª—å–Ω—ã–π IP: $localIp");
    try{
    final server = await ServerSocket.bind(InternetAddress(localIp!), 8082);

    print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ $localIp:8082. –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

    await for (Socket socket in server) {
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${socket.remoteAddress.address}");

    socket.listen(
      (data) async{
        final jsonString = utf8.decode(data);
        print("üì• –ü–æ–ª—É—á–µ–Ω–æ ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤");
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ë–î
        await SQLiteDatabase.instance.importJsonToDatabase(jsonString);
        socket.close();
        server.close();
      },
      onDone: () => print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ"),
      onError: (e) => print("–û—à–∏–±–∫–∞: $e"),
    );
    }
  }
   catch(e, stack){
      print('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: $e');
      print('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: $stack');
      rethrow;  
    }
    }
    else{
      print('request inDenied');
    }
    
  }

  Future<String?> getServerIp() async{
      final info = NetworkInfo();
      String? localIp = await info.getWifiIP();
      return localIp;
  }
}